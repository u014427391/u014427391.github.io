<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nicky&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ittrading.cn/"/>
  <updated>2018-01-16T08:54:52.319Z</updated>
  <id>http://blog.ittrading.cn/</id>
  
  <author>
    <name>Nicky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.ittrading.cn/2018/01/16/SpringBoot%E9%9B%86%E6%88%90Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86(Spring%20AOP%E6%8A%80%E6%9C%AF)/"/>
    <id>http://blog.ittrading.cn/2018/01/16/SpringBoot集成Redis实现缓存处理(Spring AOP技术)/</id>
    <published>2018-01-16T07:27:25.781Z</published>
    <updated>2018-01-16T08:54:52.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title-SpringBoot集成Redis实现缓存处理"><a href="#title-SpringBoot集成Redis实现缓存处理" class="headerlink" title="title:SpringBoot集成Redis实现缓存处理"></a>title:SpringBoot集成Redis实现缓存处理</h2><h3 id="第一章-需求分析"><a href="#第一章-需求分析" class="headerlink" title="第一章 需求分析"></a>第一章 需求分析</h3><p>计划在Team的开源项目里加入Redis实现缓存处理，因为业务功能已经实现了一部分，通过写Redis工具类，然后引用，改动量较大，而且不可以实现解耦合，所以想到了Spring框架的AOP(面向切面编程)。<br>开源项目：<a href="https://github.com/u014427391/jeeplatform" target="_blank" rel="noopener">https://github.com/u014427391/jeeplatform</a><br>欢迎star(收藏)</p><h3 id="第二章-SpringBoot简介"><a href="#第二章-SpringBoot简介" class="headerlink" title="第二章 SpringBoot简介"></a>第二章 SpringBoot简介</h3><blockquote><p>Spring框架作为JavaEE框架领域的一款重要的开源框架，在企业应用开发中有着很重要的作用，同时Spring框架及其子框架很多，所以知识量很广。<br>SpringBoot：一款Spring框架的子框架，也可以叫微框架，是2014年推出的一款使Spring框架开发变得容易的框架。学过Spring框架的都知识，Spring框架难以避免地需要配置不少XMl，而使用SpringBoot框架的话，就可以使用注解开发，极大地简化基于Spring框架的开发。SpringBoot充分利用了JavaConfig的配置模式以及“约定优于配置”的理念，能够极大的简化基于SpringMVC的Web应用和REST服务开发。</p></blockquote><p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h3 id="第三章-Redis简介"><a href="#第三章-Redis简介" class="headerlink" title="第三章 Redis简介"></a>第三章 Redis简介</h3><p>####3.1 Redis安装部署(Linux)<br>Redis安装部署的可以参考我的博客(Redis是基于C编写的，所以安装前先安装gcc编译器)：<a href="http://blog.csdn.net/u014427391/article/details/71210989" target="_blank" rel="noopener">http://blog.csdn.net/u014427391/article/details/71210989</a></p><h4 id="3-2-Redis简介"><a href="#3-2-Redis简介" class="headerlink" title="3.2 Redis简介"></a>3.2 Redis简介</h4><blockquote><p>Redis如今已经成为Web开发社区最火热的内存数据库之一，随着Web2.0的快速发展，再加上半结构数据比重加大，网站对高效性能的需求也越来越多。<br>而且大型网站一般都有几百台或者更多Redis服务器。Redis作为一款功能强大的系统，无论是存储、队列还是缓存系统，都有其用武之地。</p></blockquote><p>SpringBoot框架入门的可以参考我之前的博客：<a href="http://blog.csdn.net/u014427391/article/details/70655332" target="_blank" rel="noopener">http://blog.csdn.net/u014427391/article/details/70655332</a></p><p>###第四章 Redis缓存实现</p><h4 id="4-1下面结构图"><a href="#4-1下面结构图" class="headerlink" title="4.1下面结构图"></a>4.1下面结构图</h4><p>项目结构图：<br><img src="http://img.blog.csdn.net/20171214104855753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQyNzM5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="4-2-SpringBoot的yml文件配置"><a href="#4-2-SpringBoot的yml文件配置" class="headerlink" title="4.2 SpringBoot的yml文件配置"></a>4.2 SpringBoot的yml文件配置</h4><p>添加resource下面的application.yml配置，这里主要配置mysql，druid，redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line"></span><br><span class="line">    # 主数据源</span><br><span class="line">    shop:</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/jeeplatform?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;useSSL=false</span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line"></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">    # 连接池设置</span><br><span class="line">    druid:</span><br><span class="line">      initial-size: 5</span><br><span class="line">      min-idle: 5</span><br><span class="line">      max-active: 20</span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      # Oracle请使用select 1 from dual</span><br><span class="line">      validation-query: SELECT &apos;x&apos;</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br><span class="line">      # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">      pool-prepared-statements: true</span><br><span class="line">      max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙</span><br><span class="line">      filters: stat,wall,slf4j</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="line">      # 合并多个DruidDataSource的监控数据</span><br><span class="line">      use-global-data-source-stat: true</span><br><span class="line">  jpa:</span><br><span class="line">    database: mysql</span><br><span class="line">    hibernate:</span><br><span class="line">      show_sql: true</span><br><span class="line">      format_sql: true</span><br><span class="line">      ddl-auto: none</span><br><span class="line">      naming:</span><br><span class="line">        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">  mvc:</span><br><span class="line">    view:</span><br><span class="line">      prefix: /WEB-INF/jsp/</span><br><span class="line">      suffix: .jsp</span><br><span class="line">  #Jedis配置</span><br><span class="line">  jedis :</span><br><span class="line">    pool :</span><br><span class="line">      host : 127.0.0.1</span><br><span class="line">      port : 6379</span><br><span class="line">      password : password</span><br><span class="line">      timeout : 0</span><br><span class="line">      config :</span><br><span class="line">        maxTotal : 100</span><br><span class="line">        maxIdle : 10</span><br><span class="line">        maxWaitMillis : 100000</span><br></pre></td></tr></table></figure><p>编写一个配置类启动配置JedisConfig.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line">import redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">//@ConfigurationProperties(prefix = JedisConfig.JEDIS_PREFIX )</span><br><span class="line">public class JedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    //public static final String JEDIS_PREFIX = &quot;jedis&quot;;</span><br><span class="line"></span><br><span class="line">    @Bean(name= &quot;jedisPool&quot;)</span><br><span class="line">    @Autowired</span><br><span class="line">    public JedisPool jedisPool(@Qualifier(&quot;jedisPoolConfig&quot;) JedisPoolConfig config,</span><br><span class="line">                                   @Value(&quot;$&#123;spring.jedis.pool.host&#125;&quot;)String host,</span><br><span class="line">                                   @Value(&quot;$&#123;spring.jedis.pool.port&#125;&quot;)int port,</span><br><span class="line">                                   @Value(&quot;$&#123;spring.jedis.pool.timeout&#125;&quot;)int timeout,</span><br><span class="line">                                   @Value(&quot;$&#123;spring.jedis.pool.password&#125;&quot;)String password) &#123;</span><br><span class="line">            return new JedisPool(config, host, port,timeout,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name= &quot;jedisPoolConfig&quot;)</span><br><span class="line">    public JedisPoolConfig jedisPoolConfig (@Value(&quot;$&#123;spring.jedis.pool.config.maxTotal&#125;&quot;)int maxTotal,</span><br><span class="line">                                                @Value(&quot;$&#123;spring.jedis.pool.config.maxIdle&#125;&quot;)int maxIdle,</span><br><span class="line">                                                @Value(&quot;$&#123;spring.jedis.pool.config.maxWaitMillis&#125;&quot;)int maxWaitMillis) &#123;</span><br><span class="line">            JedisPoolConfig config = new JedisPoolConfig();</span><br><span class="line">            config.setMaxTotal(maxTotal);</span><br><span class="line">            config.setMaxIdle(maxIdle);</span><br><span class="line">            config.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">            return config;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####4.3 元注解类编写<br>编写一个元注解类RedisCache.java，被改注解定义的类都自动实现AOP缓存处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.annotation;</span><br><span class="line"></span><br><span class="line">import org.muses.jeeplatform.common.RedisCacheNamespace;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 元注解 用来标识查询数据库的方法</span><br><span class="line"> */</span><br><span class="line">@Documented</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface RedisCache &#123;</span><br><span class="line">//    RedisCacheNamespace nameSpace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JDK 5提供的注解，除了Retention以外，还有另外三个，即Target 、Inherited 和 Documented。基于这个，我们可以实现自定义的元注解<br>我们设置RedisCache基于Method方法级别引用。</p><blockquote><p>1.RetentionPolicy.SOURCE    这种类型的Annotations只在源代码级别保留,编译时就会被忽略<br>2.RetentionPolicy.CLASS    这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略<br>3.RetentionPolicy.RUNTIME    这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用.</p></blockquote><h4 id="4-4-调用JedisPool实现Redis缓存处理"><a href="#4-4-调用JedisPool实现Redis缓存处理" class="headerlink" title="4.4 调用JedisPool实现Redis缓存处理"></a>4.4 调用JedisPool实现Redis缓存处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.cache;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">@Component(&quot;redisCache&quot;)</span><br><span class="line">public class RedisCache &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">private JedisPool getJedisPool()&#123;</span><br><span class="line">return jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJedisPool(JedisPool jedisPool)&#123;</span><br><span class="line">this.jedisPool = jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从Redis缓存获取数据</span><br><span class="line"> * @param redisKey</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public Object getDataFromRedis(String redisKey)&#123;</span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line">byte[] byteArray = jedis.get(redisKey.getBytes());</span><br><span class="line"></span><br><span class="line">if(byteArray != null)&#123;</span><br><span class="line">return SerializeUtil.unSerialize(byteArray);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 保存数据到Redis</span><br><span class="line"> * @param redisKey</span><br><span class="line"> */</span><br><span class="line">public String saveDataToRedis(String redisKey,Object obj)&#123;</span><br><span class="line"></span><br><span class="line">byte[] bytes = SerializeUtil.serialize(obj);</span><br><span class="line"></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">String code = jedis.set(redisKey.getBytes(), bytes);</span><br><span class="line"></span><br><span class="line">return code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象序列化的工具类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.cache;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class SerializeUtil &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 序列化对象</span><br><span class="line"> * @param obj</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static byte[] serialize(Object obj)&#123;</span><br><span class="line">ObjectOutputStream oos = null;</span><br><span class="line">ByteArrayOutputStream baos = null;</span><br><span class="line">try&#123;</span><br><span class="line">baos = new ByteArrayOutputStream();</span><br><span class="line">oos = new ObjectOutputStream(baos);</span><br><span class="line"></span><br><span class="line">oos.writeObject(obj);</span><br><span class="line">byte[] byteArray = baos.toByteArray();</span><br><span class="line">return byteArray;</span><br><span class="line"></span><br><span class="line">&#125;catch(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 反序列化对象</span><br><span class="line"> * @param byteArray</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static Object unSerialize(byte[] byteArray)&#123;</span><br><span class="line">ByteArrayInputStream bais = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //反序列化为对象</span><br><span class="line">            bais = new ByteArrayInputStream(byteArray);</span><br><span class="line">            ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">            return ois.readObject();</span><br><span class="line">            </span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里记得Vo类都要实现Serializable<br>例如菜单信息VO类，这是一个JPA映射的实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.core.entity.admin;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description 菜单信息实体</span><br><span class="line"> * @author Nicky</span><br><span class="line"> * @date 2017年3月17日</span><br><span class="line"> */</span><br><span class="line">@Table(name=&quot;sys_menu&quot;)</span><br><span class="line">@Entity</span><br><span class="line">public class Menu implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">/** 菜单Id**/</span><br><span class="line">private int menuId;</span><br><span class="line"></span><br><span class="line">/** 上级Id**/</span><br><span class="line">private int parentId;</span><br><span class="line"></span><br><span class="line">/** 菜单名称**/</span><br><span class="line">private String menuName;</span><br><span class="line"></span><br><span class="line">/** 菜单图标**/</span><br><span class="line">private String menuIcon;</span><br><span class="line"></span><br><span class="line">/** 菜单URL**/</span><br><span class="line">private String menuUrl;</span><br><span class="line"></span><br><span class="line">/** 菜单类型**/</span><br><span class="line">private String menuType;</span><br><span class="line"></span><br><span class="line">/** 菜单排序**/</span><br><span class="line">private String menuOrder;</span><br><span class="line"></span><br><span class="line">/**菜单状态**/</span><br><span class="line">private String menuStatus;</span><br><span class="line"></span><br><span class="line">private List&lt;Menu&gt; subMenu;</span><br><span class="line"></span><br><span class="line">private String target;</span><br><span class="line"></span><br><span class="line">private boolean hasSubMenu = false;</span><br><span class="line"></span><br><span class="line">public Menu() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue(strategy=GenerationType.IDENTITY)</span><br><span class="line">public int getMenuId() &#123;</span><br><span class="line">return this.menuId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuId(int menuId) &#123;</span><br><span class="line">this.menuId = menuId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Column(length=100)</span><br><span class="line">public int getParentId() &#123;</span><br><span class="line">return parentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setParentId(int parentId) &#123;</span><br><span class="line">this.parentId = parentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Column(length=100)</span><br><span class="line">public String getMenuName() &#123;</span><br><span class="line">return this.menuName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuName(String menuName) &#123;</span><br><span class="line">this.menuName = menuName;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">@Column(length=30)</span><br><span class="line">public String getMenuIcon() &#123;</span><br><span class="line">return this.menuIcon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuIcon(String menuIcon) &#123;</span><br><span class="line">this.menuIcon = menuIcon;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">@Column(length=100)</span><br><span class="line">public String getMenuUrl() &#123;</span><br><span class="line">return this.menuUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuUrl(String menuUrl) &#123;</span><br><span class="line">this.menuUrl = menuUrl;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">@Column(length=100)</span><br><span class="line">public String getMenuType() &#123;</span><br><span class="line">return this.menuType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuType(String menuType) &#123;</span><br><span class="line">this.menuType = menuType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Column(length=10)</span><br><span class="line">public String getMenuOrder() &#123;</span><br><span class="line">return menuOrder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuOrder(String menuOrder) &#123;</span><br><span class="line">this.menuOrder = menuOrder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Column(length=10)</span><br><span class="line">public String getMenuStatus()&#123;</span><br><span class="line">return menuStatus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMenuStatus(String menuStatus)&#123;</span><br><span class="line">this.menuStatus = menuStatus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transient</span><br><span class="line">public List&lt;Menu&gt; getSubMenu() &#123;</span><br><span class="line">return subMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSubMenu(List&lt;Menu&gt; subMenu) &#123;</span><br><span class="line">this.subMenu = subMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTarget(String target)&#123;</span><br><span class="line">this.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transient</span><br><span class="line">public String getTarget()&#123;</span><br><span class="line">return target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setHasSubMenu(boolean hasSubMenu)&#123;</span><br><span class="line">this.hasSubMenu = hasSubMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transient</span><br><span class="line">public boolean getHasSubMenu()&#123;</span><br><span class="line">return hasSubMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####4.5 Spring AOP实现监控所有被@RedisCache注解的方法缓存</p><p>先从Redis里获取缓存,查询不到，就查询MySQL数据库，然后再保存到Redis缓存里，下次查询时直接调用Redis缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package org.muses.jeeplatform.cache;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * AOP实现Redis缓存处理</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class RedisAspect &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOGGER = LoggerFactory.getLogger(RedisAspect.class);</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">    @Qualifier(&quot;redisCache&quot;)</span><br><span class="line">private RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截所有元注解RedisCache注解的方法</span><br><span class="line"> */</span><br><span class="line">@Pointcut(&quot;@annotation(org.muses.jeeplatform.annotation.RedisCache)&quot;)</span><br><span class="line">public void pointcutMethod()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 环绕处理，先从Redis里获取缓存,查询不到，就查询MySQL数据库，</span><br><span class="line"> * 然后再保存到Redis缓存里</span><br><span class="line"> * @param joinPoint</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Around(&quot;pointcutMethod()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint joinPoint)&#123;</span><br><span class="line">//前置：从Redis里获取缓存</span><br><span class="line">//先获取目标方法参数</span><br><span class="line">long startTime = System.currentTimeMillis();</span><br><span class="line">String applId = null;</span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line">if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">applId = String.valueOf(args[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取目标方法所在类</span><br><span class="line">String target = joinPoint.getTarget().toString();</span><br><span class="line">String className = target.split(&quot;@&quot;)[0];</span><br><span class="line"></span><br><span class="line">//获取目标方法的方法名称</span><br><span class="line">String methodName = joinPoint.getSignature().getName();</span><br><span class="line"></span><br><span class="line">//redis中key格式：    applId:方法名称</span><br><span class="line">String redisKey = applId + &quot;:&quot; + className + &quot;.&quot; + methodName;</span><br><span class="line"></span><br><span class="line">Object obj = redisCache.getDataFromRedis(redisKey);</span><br><span class="line"></span><br><span class="line">if(obj!=null)&#123;</span><br><span class="line">LOGGER.info(&quot;**********从Redis中查到了数据**********&quot;);</span><br><span class="line">LOGGER.info(&quot;Redis的KEY值:&quot;+redisKey);</span><br><span class="line">LOGGER.info(&quot;REDIS的VALUE值:&quot;+obj.toString());</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">long endTime = System.currentTimeMillis();</span><br><span class="line">LOGGER.info(&quot;Redis缓存AOP处理所用时间:&quot;+(endTime-startTime));</span><br><span class="line">LOGGER.info(&quot;**********没有从Redis查到数据**********&quot;);</span><br><span class="line">try&#123;</span><br><span class="line">obj = joinPoint.proceed();</span><br><span class="line">&#125;catch(Throwable e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">LOGGER.info(&quot;**********开始从MySQL查询数据**********&quot;);</span><br><span class="line">//后置：将数据库查到的数据保存到Redis</span><br><span class="line">String code = redisCache.saveDataToRedis(redisKey,obj);</span><br><span class="line">if(code.equals(&quot;OK&quot;))&#123;</span><br><span class="line">LOGGER.info(&quot;**********数据成功保存到Redis缓存!!!**********&quot;);</span><br><span class="line">LOGGER.info(&quot;Redis的KEY值:&quot;+redisKey);</span><br><span class="line">LOGGER.info(&quot;REDIS的VALUE值:&quot;+obj.toString());</span><br><span class="line">&#125;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用@RedisCache实现缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通过菜单Id获取菜单信息</span><br><span class="line"> * @param id</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Transactional</span><br><span class="line">@RedisCache</span><br><span class="line">public Menu findMenuById(@RedisCacheKey int id)&#123;</span><br><span class="line">return menuRepository.findMenuByMenuId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录系统，然后加入@RedisCache注解的方法都会实现Redis缓存处理<br><img src="http://img.blog.csdn.net/20171214112834478?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQyNzM5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20171214104250995?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQyNzM5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>可以看到Redis里保存到了缓存</p><p><img src="http://img.blog.csdn.net/20171214104303308?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQyNzM5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>项目代码：<a href="https://github.com/u014427391/jeeplatform,欢迎去github上star(收藏" target="_blank" rel="noopener">https://github.com/u014427391/jeeplatform,欢迎去github上star(收藏</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;title-SpringBoot集成Redis实现缓存处理&quot;&gt;&lt;a href=&quot;#title-SpringBoot集成Redis实现缓存处理&quot; class=&quot;headerlink&quot; title=&quot;title:SpringBoot集成Redis实现缓存处理&quot;&gt;&lt;/a&gt;title:SpringBoot集成Redis实现缓存处理&lt;/h2&gt;&lt;h3 id=&quot;第一章-需求分析&quot;&gt;&lt;a href=&quot;#第一章-需求分析&quot; class=&quot;headerlink&quot; title=&quot;第一章 需求分析&quot;&gt;&lt;/a&gt;第一章 需求分析&lt;/h3&gt;&lt;p&gt;计划在Team的开源项目里加入Redis实现缓存处理，因为业务功能已经实现了一部分，通过写Redis工具类，然后引用，改动量较大，而且不可以实现解耦合，所以想到了Spring框架的AOP(面向切面编程)。&lt;br&gt;开源项目：&lt;a href=&quot;https://github.com/u014427391/jeeplatform&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/u014427391/jeeplatform&lt;/a&gt;&lt;br&gt;欢迎star(收藏)&lt;/p&gt;
&lt;h3 id=&quot;第二章-SpringBoot简介&quot;&gt;&lt;a href=&quot;#第二章-SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;第二章 SpringBoot简介&quot;&gt;&lt;/a&gt;第二章 SpringBoot简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring框架作为JavaEE框架领域的一款重要的开源框架，在企业应用开发中有着很重要的作用，同时Spring框架及其子框架很多，所以知识量很广。&lt;br&gt;SpringBoot：一款Spring框架的子框架，也可以叫微框架，是2014年推出的一款使Spring框架开发变得容易的框架。学过Spring框架的都知识，Spring框架难以避免地需要配置不少XMl，而使用SpringBoot框架的话，就可以使用注解开发，极大地简化基于Spring框架的开发。SpringBoot充分利用了JavaConfig的配置模式以及“约定优于配置”的理念，能够极大的简化基于SpringMVC的Web应用和REST服务开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.ittrading.cn/2018/01/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.ittrading.cn/2018/01/16/MySQL数据库的锁机制/</id>
    <published>2018-01-16T07:26:58.605Z</published>
    <updated>2018-01-16T08:54:57.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title-MySQL数据库的锁机制"><a href="#title-MySQL数据库的锁机制" class="headerlink" title="title:MySQL数据库的锁机制"></a>title:MySQL数据库的锁机制</h2><p>在并发访问情况下，很有可能出现不可重复读等等读现象。为了更好的应对高并发，封锁、时间戳、乐观并发控制(乐观锁)、悲观并发控制(悲观锁)都是并发控制采用的主要技术方式。</p><p>###锁分类<br>①、按操作划分：DML锁，DDL锁<br>②、按锁的粒度划分：表级锁、行级锁、页级锁<br>③、按锁级别划分：共享锁、排他锁<br>④、按加锁方式划分：自动锁、显示锁<br>⑤、按使用方式划分：乐观锁、悲观锁</p><p>###乐观锁和悲观锁</p><p>乐观并发控制和悲观并发控制是并发控制采用的主要方法。乐观锁和悲观锁不仅在关系数据库里应用，在Hibernate、Memcache等等也有相关概念。</p><p>悲观锁：也即悲观并发控制，Pessimistic Concurrency Controller，缩写PCC。悲观锁是指在数据处理过程，使数据处于锁定状态，一般使用数据库的锁机制实现。<br>备注，在MySQL中使用悲观锁，必须关闭MySQL的自动提交，set autocommit=0。MySQL默认使用自动提交autocommit模式，也即你执行一个更新操作，MySQL会自动将结果提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//0.开始事务</span><br><span class="line">begin;/begin work;/start transaction; (三者选一就可</span><br><span class="line">//1.查询出商品信息</span><br><span class="line">select status from t_goods where id=1 for update;</span><br><span class="line">//2.根据商品信息生成订单</span><br><span class="line">insert into t_orders (id,goods_id) values (null,1);</span><br><span class="line">//3.修改商品status为2</span><br><span class="line">update t_goods set status=2;</span><br><span class="line">//4.提交事务</span><br><span class="line">commit;/commit work;</span><br></pre></td></tr></table></figure><p>本例子使用select…for update方式将数据锁住，也就是开启了排他锁</p><p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>悲观锁优缺点：<br>悲观并发控制(悲观锁)采用”先取锁再分”的保守策略，为数据处理提供了安全的保证。但在效率方面，加锁机制会产生额外的开销，增加产生死锁的机会。</p></blockquote><p>乐观锁：相对悲观锁来说，乐观锁是通过记录数据版本的方式实现乐观锁。为数据增加一个版本标识，读取数据时，将版本标识一起读出，数据没更新一次，就对版本标识进行更新。</p><blockquote><p>乐观锁优缺点：<br>乐观锁认为事务直接竞争的概率是很小的，在提交的时候才锁定，所以不会产生死锁。但是如果两个事务同时读取数据库的某一行，这时，就会发现乐观锁的弊端。</p></blockquote><p>###MySQL常用存储引擎的锁机制</p><blockquote><p>BDB：支持页级锁和表级锁，默认是页级锁<br>InnoDB：支持行级锁和表级锁，默认是行级锁<br>MyISAM &amp;Memory：这两个存储引擎都是采用表级锁</p></blockquote><p>###MySQL中排它锁和共享锁<br>排它锁(exclusive locck)<br>排它锁又叫写锁，如果事务T对A加上排它锁，则其它事务都不能对A加任何类型的锁。获准排它锁的事务既能读数据，又能写数据。</p><blockquote><p>用法：SELECT … FOR UPDATE</p></blockquote><p>共享锁(share lock)<br>共享锁又叫读锁，如果事务T对A加上共享锁，则其它事务只能对A再加共享锁，不能加其它锁。获准共享锁的事务只能读数据，不能写数据。</p><blockquote><p>用法：SELECT … LOCK IN SHARE MODE;</p></blockquote><p>###MySQL中的行级锁、表级锁和页级锁</p><blockquote><p>行级锁：行级锁分为共享锁和排它锁。行级锁是Mysql中锁定粒度最细的锁。InnoDB引擎支持行级锁和表级锁，只有在通过索引条件检索数据的时候，才使用行级锁，否就使用表级锁。行级锁开销大，加锁慢，锁定粒度最小，发生锁冲突概率最低，并发度最高</p><p>表级锁：表级锁分为表共享锁和表独占锁。表级锁开销小，加锁快，锁定粒度大、发生锁冲突最高，并发度最低</p><p>页级锁：页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁。<br>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p></blockquote><p><a href="http://www.hollischuang.com/archives/934" target="_blank" rel="noopener">http://www.hollischuang.com/archives/934</a><br><a href="https://crossoverjie.top/2017/07/09/SSM15/" target="_blank" rel="noopener">https://crossoverjie.top/2017/07/09/SSM15/</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;title-MySQL数据库的锁机制&quot;&gt;&lt;a href=&quot;#title-MySQL数据库的锁机制&quot; class=&quot;headerlink&quot; title=&quot;title:MySQL数据库的锁机制&quot;&gt;&lt;/a&gt;title:MySQL数据库的锁机制&lt;/h2&gt;&lt;p&gt;在并发访问情况下，很有可能出现不可重复读等等读现象。为了更好的应对高并发，封锁、时间戳、乐观并发控制(乐观锁)、悲观并发控制(悲观锁)都是并发控制采用的主要技术方式。&lt;/p&gt;
&lt;p&gt;###锁分类&lt;br&gt;①、按操作划分：DML锁，DDL锁&lt;br&gt;②、按锁的粒度划分：表级锁、行级锁、页级锁&lt;br&gt;③、按锁级别划分：共享锁、排他锁&lt;br&gt;④、按加锁方式划分：自动锁、显示锁&lt;br&gt;⑤、按使用方式划分：乐观锁、悲观锁&lt;/p&gt;
&lt;p&gt;###乐观锁和悲观锁&lt;/p&gt;
&lt;p&gt;乐观并发控制和悲观并发控制是并发控制采用的主要方法。乐观锁和悲观锁不仅在关系数据库里应用，在Hibernate、Memcache等等也有相关概念。&lt;/p&gt;
&lt;p&gt;悲观锁：也即悲观并发控制，Pessimistic Concurrency Controller，缩写PCC。悲观锁是指在数据处理过程，使数据处于锁定状态，一般使用数据库的锁机制实现。&lt;br&gt;备注，在MySQL中使用悲观锁，必须关闭MySQL的自动提交，set autocommit=0。MySQL默认使用自动提交autocommit模式，也即你执行一个更新操作，MySQL会自动将结果提交。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//0.开始事务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;begin;/begin work;/start transaction; (三者选一就可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//1.查询出商品信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select status from t_goods where id=1 for update;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//2.根据商品信息生成订单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert into t_orders (id,goods_id) values (null,1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//3.修改商品status为2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;update t_goods set status=2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//4.提交事务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit;/commit work;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本例子使用select…for update方式将数据锁住，也就是开启了排他锁&lt;/p&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
    
  </entry>
  
</feed>
